package com.github.binarywang.demo.wechat.utils.gps;

public class Ex{
    public static void main(String[] args){
	
//	double[] ry={30.2371805,30.2371215,30.2370840,30.2369606,30.2369445,30.2369552,30.2369606,30.2369552,30.2369499,30.2369499,30.2369499,30.2369499,30.2369499,30.2369499,30.2369499,30.2369499,30.2369445,30.2369284,30.2369284,30.2369338,30.2369284,30.2369284,30.2369284,30.2369284,30.2369284,30.2369284,30.2369284,30.2369284,30.2369284,30.2369284,30.2369284,30.2369284,30.2369284,30.2369284,30.2369391,30.2370411,30.2373898,30.2378511,30.2381300,30.2384734,30.2388381,30.2392405,30.2392995,30.2392727,30.2393049,30.2393317,30.2395355,30.2396696,30.2398413,30.2401095,30.2402222,30.2402383,30.2402007,30.2402436,30.2402865,30.2403831,30.2406084,30.2407747,30.2409303,30.2410590,30.2411717,30.2412897,30.2413755,30.2415096,30.2416223,30.2417778,30.2419281,30.2420729,30.2421641,30.2421694,30.2421641,30.2421855,30.2422285,30.2422606,30.2422553,30.2423089,30.2423089,30.2422821,30.2422606,30.2422928,30.2423036,30.2423357,30.2423679,30.2424001,30.2424484,30.2424967,30.2425450,30.2425503,30.2425664,30.2426308,30.2427327,30.2427488,30.2427971,30.2428185,30.2429044,30.2429687,30.2430599,30.2431082,30.2430975,30.2429312,30.2425932,30.2421265,30.2415794,30.2409034,30.2403080,30.2400988,30.2400988,30.2400988,30.2400988,30.2400988,30.2400451,30.2400451,30.2400451,30.2400398,30.2399325,30.2396053,30.2390420,30.2383607,30.2376687,30.2369874,30.2361989,30.2353996,30.2346915,30.2342569,30.2338171,30.2333343,30.2328139,30.2325296,30.2326261,30.2330929,30.2336293,30.2341979,30.2345144,30.2347773,30.2350670,30.2353245,30.2354478,30.2355605,30.2354264,30.2350616,30.2346539,30.2343535,30.2340853,30.2336776,30.2331626,30.2325296,30.2319020,30.2312314,30.2304857,30.2295738,30.2288550,30.2279752,30.2272027,30.2265000,30.2259904,30.2256202,30.2252286,30.2249014,30.2246654,30.2245473,30.2245420,30.2245366,30.2245366,30.2244079,30.2240753,30.2236515,30.2231419,30.2227127,30.2223372,30.2219349,30.2214789,30.2210068,30.2205294,30.2200520,30.2195745,30.2190756,30.2186036,30.2181583,30.2177238,30.2173054,30.2169942,30.2167260,30.2163344,30.2159589,30.2157282,30.2155673};//response
	double[] ry={120.0223892,120.0223249,120.0222820,120.0222551,120.0222712,120.0222766,120.0223249,120.0223195,120.0223141,120.0223195,120.0223195,120.0223195,120.0223195,120.0223195,120.0223195,120.0223249,120.0223517,120.0223785,120.0223785,120.0223785,120.0223785,120.0223785,120.0223785,120.0223785,120.0223785,120.0223785,120.0223785,120.0223785,120.0223785,120.0223785,120.0223785,120.0223785,120.0223785,120.0223785,120.0223785,120.0223517,120.0221800,120.0219762,120.0218796,120.0219386,120.0218528,120.0216221,120.0212466,120.0209516,120.0207692,120.0206512,120.0205761,120.0205010,120.0204956,120.0204259,120.0204044,120.0204044,120.0204527,120.0204902,120.0208818,120.0216060,120.0225126,120.0234675,120.0244277,120.0252860,120.0260585,120.0270187,120.0279092,120.0286173,120.0294166,120.0302106,120.0310796,120.0320130,120.0324958,120.0325495,120.0325924,120.0327372,120.0329625,120.0332039,120.0332897,120.0334239,120.0334829,120.0335258,120.0336438,120.0339335,120.0341856,120.0344216,120.0347167,120.0349581,120.0352424,120.0355803,120.0358808,120.0361436,120.0362616,120.0365781,120.0370395,120.0372487,120.0375008,120.0377959,120.0381714,120.0386005,120.0389546,120.0392121,120.0394266,120.0396573,120.0401079,120.0406283,120.0412881,120.0419050,120.0422000,120.0421142,120.0421142,120.0421088,120.0421088,120.0421088,120.0420552,120.0420445,120.0420391,120.0419533,120.0418889,120.0420284,120.0422966,120.0426828,120.0431925,120.0436913,120.0442492,120.0448125,120.0452846,120.0455206,120.0452417,120.0447750,120.0443512,120.0441473,120.0444263,120.0447857,120.0452792,120.0457674,120.0461965,120.0464218,120.0467222,120.0469851,120.0471568,120.0473070,120.0475859,120.0479131,120.0482189,120.0483423,120.0483798,120.0483101,120.0482618,120.0484067,120.0489431,120.0495707,120.0502949,120.0511854,120.0517541,120.0520545,120.0524139,120.0528699,120.0532346,120.0535082,120.0537818,120.0540286,120.0542110,120.0543022,120.0543129,120.0543129,120.0543129,120.0544095,120.0546455,120.0549620,120.0553214,120.0556486,120.0559169,120.0562173,120.0565499,120.0568717,120.0570756,120.0572150,120.0573652,120.0575047,120.0576710,120.0577944,120.0579339,120.0580358,120.0580734,120.0580734,120.0580304,120.0579500,120.0582879,120.0588941};
	int n=ry.length;//number of data values
	double[] rt=new double[n];//t ordinates
	for(int i=0;i<n;i++){
		rt[i]=i+1;
	}

	int m=7;//derivative in penalty 
	//m=2 produces a cubic smoothing spline

	double lam=124.3984;//smoothing parameter value
	//For this data and this choice of lambda, the same result will
	//be obtained using spar=1 in the R smooth.spline function with
	//all.knots=T

	vector y=new vector(ry);//convert array to vector
	vector tau=new vector(rt);//convert array to vector

	//ss objects for processing y
	ss[] s=new ss[n];
	//ss objects for processing polynomial matrix
	ss[][] sT=new ss[n][m];
	//polynomial matrix
	matrix T=new matrix(tau,m);

	//initialize forward recusion for y
	s[0]=new ss(1,tau,m,lam);
	s[0].forward(new matrix(m,0), new vector(m,0),new vector(y.value(0)));

	//initialize forward recusion for T
	for(int j=0;j<m;j++){
	    sT[0][j]=new ss(1,tau,m,lam);
	    sT[0][j].forward(new matrix(m,0), new vector(m,0),new vector(T.value(0,j)));
	}

	//forward recursion
	for(int i=1;i<n;i++){
	    s[i]=new ss(i+1,tau,m, lam);
	    s[i].forward(s[i-1].GetS(),s[i-1].Getx(),new vector(y.value(i)));

	    for(int j=0;j<m;j++){
		sT[i][j]=new ss(i+1,tau,m,lam);
		sT[i][j].forward(sT[i-1][j].GetS(), sT[i-1][j].Getx(),new vector(T.value(i,j)));
	    }

	}

	//define xn and Sn for s[n-1] for use in subsequent recusions
	s[n-1].Setxntox();
	s[n-1].SetSntoS();

	//initialize backward recusion for y
	s[n-2].smooth(new vector(m,0),new matrix(m,0), s[n-1].GetHTRinv(), s[n-1].Geteps());

	//initialize backward recusion for T
	for(int j=0;j<m;j++){
	    sT[n-1][j].Setxntox();
	    sT[n-2][j].smooth(new vector(m,0),new matrix(m,0), sT[n-1][j].GetHTRinv(), sT[n-1][j].Geteps());
	}

	//backward recursion
	for(int i=n-3;i>=0;i--){
	    s[i].smooth(s[i+1].Geta(), s[i+1].GetA(),s[i+1].GetHTRinv(), s[i+1].Geteps());
	    for(int j=0;j<m;j++){
		sT[i][j].smooth(sT[i+1][j].Geta(), sT[i+1][j].GetA(),sT[i+1][j].GetHTRinv(), sT[i+1][j].Geteps());
	    }
	}

	//now compute the fit and leverage values

	//Ttil=T-fit_to_T
	matrix Ttil=new matrix(n,m,0);
	vector fit=new vector(n,0);
	for(int i=0;i<n;i++){
	    fit.setValue(i,s[i].Getxn().value(0));
	    for(int j=0;j<m;j++)
		Ttil.setValue(i,j,T.value(i,j)-sT[i][j].Getxn().value(0));
	}


	vector g_0=Ttil.trans().times(y);

	//explicitely evaluate the m by m matrix ${T^T\Sigma_{y_0}^{-1}T)^{-1}$ here
	matrix V=Ttil.trans().times(T).chol(new matrix(m,1));
	
	fit=fit.plus(Ttil.times(V.times(g_0)));

	System.out.println("The fit");
	fit.printVector();
	

	vector lev=new vector(n, 0);//leverage values 
	vector temp;//temporary storage vector of length m 
	for(int j=0;j<n;j++){
	    temp=new vector(Ttil.trans(),j);//extract jth row from Ttil 
	    lev.setValue(j,s[j].GetSn().value(0,0)+temp.inner(V.times(temp)));
	}

	System.out.println("Levarage values");
	lev.printVector();
    }
}
